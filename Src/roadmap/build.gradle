// plugins {
//     id 'java'
//     id 'org.springframework.boot' version '3.0.6'
//     id 'io.spring.dependency-management' version '1.1.0'
// }

// group = 'com.react'
// version = '0.0.1-SNAPSHOT'
// sourceCompatibility = '17'

// configurations {
//     compileOnly {
//         extendsFrom annotationProcessor
//     }
// }

// repositories {
//     mavenCentral()
// }

// dependencies {
//     implementation 'org.springframework.boot:spring-boot-starter-web'
//     compileOnly 'org.projectlombok:lombok'
//     runtimeOnly 'com.mysql:mysql-connector-j'
//     annotationProcessor 'org.projectlombok:lombok'
//     testImplementation 'org.springframework.boot:spring-boot-starter-test'
//     compileOnly 'org.projectlombok:lombok:1.18.24'
//     annotationProcessor 'org.projectlombok:lombok:1.18.24'
// }

// application {
//     mainClass = 'com.react.roadmap.function.DijkstraAlgorithm' // 실제 메인 클래스의 경로로 수정
// }

// tasks.named('test') {
//     useJUnitPlatform()
// }

// def frontendDir = "$projectDir/src/main/front"

// sourceSets {
//     main {
//         resources { srcDirs = ["$projectDir/src/main/resources"]
//         }
//     }
// }

// processResources { dependsOn "copyReactBuildFiles" }

// task installReact(type: Exec) {
//     workingDir "$frontendDir"
//     inputs.dir "$frontendDir"
//     group = BasePlugin.BUILD_GROUP
//     if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//         commandLine "npm.cmd", "audit", "fix"
//         commandLine 'npm.cmd', 'install' }
//     else {
//         commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
//     }
// }

// task buildReact(type: Exec) {
//     dependsOn "installReact"
//     workingDir "$frontendDir"
//     inputs.dir "$frontendDir"
//     group = BasePlugin.BUILD_GROUP
//     if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//         commandLine "npm.cmd", "run-script", "build"
//     } else {
//         commandLine "npm", "run-script", "build"
//     }
// }

// task copyReactBuildFiles(type: Copy) {
//     dependsOn "buildReact"
//     from "$frontendDir/build"
//     into "$projectDir/src/main/resources/static"
// }

// tasks.withType(JavaCompile) {
//     options.encoding = 'UTF-8'
//     options.compilerArgs += ['-parameters']
// }

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'application' // 추가
}

group = 'com.react'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

application {
    mainClass = 'com.react.roadmap.function.DijkstraAlgorithm' // 실제 메인 클래스의 경로로 수정
}

tasks.named('test') {
    useJUnitPlatform()
}

def frontendDir = "$projectDir/src/main/front"

sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}
